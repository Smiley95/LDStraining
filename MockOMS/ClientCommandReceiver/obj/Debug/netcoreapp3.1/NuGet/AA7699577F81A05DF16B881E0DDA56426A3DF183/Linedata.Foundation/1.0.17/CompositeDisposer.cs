// <auto-generated />
// ReSharper disable CheckNamespace


namespace ClientCommandReceiver.Utils
{
    using System;
    using System.Collections.Generic;
    using CodeAnalysis = System.Diagnostics.CodeAnalysis;
    using System.Threading.Tasks;
    using ClientCommandReceiver.Annotations;

    [CodeAnalysis.ExcludeFromCodeCoverage]
    [UsedImplicitly(ImplicitUseTargetFlags.WithMembers)]
    sealed class CompositeDisposer : IDisposable
    {
        readonly List<IDisposable> _disposables;
        bool _disposed;

        public CompositeDisposer([NotNull] IEnumerable<IDisposable> disposables)
        {
            Ensure.IsNotNull(disposables, nameof(disposables));

            _disposables = new List<IDisposable>(disposables);
        }

        public CompositeDisposer([NotNull] params IDisposable[] disposables)
        {
            Ensure.IsNotNull(disposables, nameof(disposables));

            _disposables = new List<IDisposable>(disposables);
        }

        public void Add([NotNull] Action disposer)
        {
            Ensure.IsNotNull(disposer, nameof(disposer));

            _disposables.Add(new Disposer(disposer));
        }

        public void Add([NotNull] Func<Task> disposer)
        {
            Ensure.IsNotNull(disposer, nameof(disposer));

            _disposables.Add(new Disposer(disposer));
        }

        public void Add([NotNull] IDisposable disposable)
        {
            Ensure.IsNotNull(disposable, nameof(disposable));

            _disposables.Add(disposable);
        }

        public void Add([NotNull] IEnumerable<IDisposable> disposables)
        {
            Ensure.IsNotNull(disposables, nameof(disposables));

            _disposables.AddRange(disposables);
        }

        public void Add([NotNull] params IDisposable[] disposables)
        {
            Ensure.IsNotNull(disposables, nameof(disposables));

            _disposables.AddRange(disposables);
        }

        public void Dispose()
        {
            if (_disposed)
                return;

            foreach (var disposable in _disposables)
            {
                try
                {
                    disposable?.Dispose();
                }
                catch
                {
                    //ignore
                }
            }

            _disposed = true;
        }
    }
}
