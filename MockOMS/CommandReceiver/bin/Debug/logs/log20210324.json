{"Timestamp":"2021-03-24T15:25:47.1568072+01:00","Level":"Warning","MessageTemplate":"No token validator was configured; incoming message access tokens will not be validated","Properties":{"SourceContext":"Linedata.Foundation.Messaging.IdentityModel.TokenValidatorPipeline"}}
{"Timestamp":"2021-03-24T15:25:47.1682482+01:00","Level":"Warning","MessageTemplate":"No identity context accessor was configured; no identity context will be set","Properties":{"SourceContext":"Linedata.Foundation.Messaging.IdentityModel.TokenValidatorPipeline"}}
{"Timestamp":"2021-03-24T15:25:47.1685530+01:00","Level":"Warning","MessageTemplate":"No service credentials provider was configured; outgoing messages will not contain access tokens","Properties":{"SourceContext":"Linedata.Foundation.Messaging.IdentityModel.TokenProviderPipeline"}}
{"Timestamp":"2021-03-24T15:25:47.3123180+01:00","Level":"Information","MessageTemplate":"Starting service {name}...","Properties":{"name":"Command Receiver","SourceContext":"Linedata.Foundation.ServiceHosting.Microservice"}}
{"Timestamp":"2021-03-24T15:25:47.3193120+01:00","Level":"Information","MessageTemplate":"Opening command receiver server endpoint at {address}","Properties":{"address":"tcp://localhost:12333","SourceContext":"Linedata.Foundation.CommandReceiver.CommandReceiverService"}}
{"Timestamp":"2021-03-24T15:25:47.4768346+01:00","Level":"Information","MessageTemplate":"Command Receiver is listening at {address}","Properties":{"address":"tcp://localhost:12333","SourceContext":"Linedata.Foundation.CommandReceiver.CommandReceiverService"}}
{"Timestamp":"2021-03-24T15:25:47.4881088+01:00","Level":"Information","MessageTemplate":"Application started. Press Ctrl+C to shut down.","Properties":{"SourceContext":"Microsoft.Hosting.Lifetime"}}
{"Timestamp":"2021-03-24T15:25:47.4933272+01:00","Level":"Information","MessageTemplate":"Hosting environment: {envName}","Properties":{"envName":"Production","SourceContext":"Microsoft.Hosting.Lifetime"}}
{"Timestamp":"2021-03-24T15:25:47.4936648+01:00","Level":"Information","MessageTemplate":"Content root path: {contentRoot}","Properties":{"contentRoot":"C:\\Users\\Etaieb\\Desktop\\Training\\MockOMS\\CommandReceiver\\bin\\Debug\\netcoreapp3.1","SourceContext":"Microsoft.Hosting.Lifetime"}}
{"Timestamp":"2021-03-24T15:25:47.5000221+01:00","Level":"Information","MessageTemplate":"Application is shutting down...","Properties":{"SourceContext":"Microsoft.Hosting.Lifetime"}}
{"Timestamp":"2021-03-24T15:25:52.5028195+01:00","Level":"Information","MessageTemplate":"Waiting for the host to be disposed. Ensure all 'IHost' instances are wrapped in 'using' blocks.","Properties":{"SourceContext":"Microsoft.Hosting.Lifetime"}}
{"Timestamp":"2021-03-24T15:51:04.3501071+01:00","Level":"Information","MessageTemplate":"Received connection from {address}","Properties":{"address":"4d902a11fd0d462b95a4266edc4b32ec","SourceContext":"Linedata.Foundation.CommandReceiver.CommandReceiverService"}}
{"Timestamp":"2021-03-24T15:51:04.5528294+01:00","Level":"Warning","MessageTemplate":"Error deserializing message type {type}","Exception":"Newtonsoft.Json.JsonSerializationException: Unable to find a constructor to use for type Accounts.Domain.Commands.Public.CreateAccount. A class should either have a default constructor, one constructor with arguments or a constructor marked with the JsonConstructor attribute. Path 'CommandId', line 1, position 13.\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateNewObject(JsonReader reader, JsonObjectContract objectContract, JsonProperty containerMember, JsonProperty containerProperty, String id, Boolean& createdFromNonDefaultCreator)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObject(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueInternal(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.Deserialize(JsonReader reader, Type objectType, Boolean checkAdditionalContent)\r\n   at Newtonsoft.Json.JsonSerializer.DeserializeInternal(JsonReader reader, Type objectType)\r\n   at Newtonsoft.Json.JsonSerializer.Deserialize(JsonReader reader, Type objectType)\r\n   at Newtonsoft.Json.JsonSerializer.Deserialize(TextReader reader, Type objectType)\r\n   at Linedata.Foundation.Messaging.Serialization.Json.JsonNetSerializer.Deserialize(Type type, Stream stream)","Properties":{"type":"CreateAccount","SourceContext":"Linedata.Foundation.Messaging.Serialization.Json.JsonNetSerializer"}}
{"Timestamp":"2021-03-24T15:51:04.5608360+01:00","Level":"Warning","MessageTemplate":"Error processing inbound message","Exception":"Linedata.Foundation.Messaging.SerializationException: Error deserializing message type CreateAccount\r\n ---> Newtonsoft.Json.JsonSerializationException: Unable to find a constructor to use for type Accounts.Domain.Commands.Public.CreateAccount. A class should either have a default constructor, one constructor with arguments or a constructor marked with the JsonConstructor attribute. Path 'CommandId', line 1, position 13.\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateNewObject(JsonReader reader, JsonObjectContract objectContract, JsonProperty containerMember, JsonProperty containerProperty, String id, Boolean& createdFromNonDefaultCreator)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObject(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueInternal(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.Deserialize(JsonReader reader, Type objectType, Boolean checkAdditionalContent)\r\n   at Newtonsoft.Json.JsonSerializer.DeserializeInternal(JsonReader reader, Type objectType)\r\n   at Newtonsoft.Json.JsonSerializer.Deserialize(JsonReader reader, Type objectType)\r\n   at Newtonsoft.Json.JsonSerializer.Deserialize(TextReader reader, Type objectType)\r\n   at Linedata.Foundation.Messaging.Serialization.Json.JsonNetSerializer.Deserialize(Type type, Stream stream)\r\n   --- End of inner exception stack trace ---\r\n   at Linedata.Foundation.Messaging.Serialization.Json.JsonNetSerializer.Deserialize(Type type, Stream stream)\r\n   at Linedata.Foundation.Messaging.Serialization.MessageSerializerExtensions.Deserialize(IMessageSerializer serializer, Type type, Byte[] data)\r\n   at Linedata.Foundation.Messaging.Channels.DuplexChannel.ConvertMessage(Envelope envelope)\r\n   at Linedata.Foundation.Messaging.Channels.DuplexChannel.OnReceiveAsync(IDuplexSocket socket, Envelope envelope)\r\n   at Linedata.Foundation.Messaging.Dispatchers.Queued.QueuedDuplexChannelDispatcher.ProcessInboundAsync(CancellationToken cancellationToken)","Properties":{"SourceContext":"Linedata.Foundation.Messaging.Dispatchers.Queued.QueuedDuplexChannelDispatcher"}}
{"Timestamp":"2021-03-24T15:52:23.9836984+01:00","Level":"Information","MessageTemplate":"Connection from {address} has disconnected","Properties":{"address":"4d902a11fd0d462b95a4266edc4b32ec","SourceContext":"Linedata.Foundation.CommandReceiver.CommandReceiverService"}}
{"Timestamp":"2021-03-24T15:52:34.7964460+01:00","Level":"Information","MessageTemplate":"Received connection from {address}","Properties":{"address":"908849c49bb84804b01dd40f78fbba51","SourceContext":"Linedata.Foundation.CommandReceiver.CommandReceiverService"}}
{"Timestamp":"2021-03-24T15:52:34.7999735+01:00","Level":"Warning","MessageTemplate":"Error deserializing message type {type}","Exception":"Newtonsoft.Json.JsonSerializationException: Unable to find a constructor to use for type Accounts.Domain.Commands.Public.CreateAccount. A class should either have a default constructor, one constructor with arguments or a constructor marked with the JsonConstructor attribute. Path 'CommandId', line 1, position 13.\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateNewObject(JsonReader reader, JsonObjectContract objectContract, JsonProperty containerMember, JsonProperty containerProperty, String id, Boolean& createdFromNonDefaultCreator)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObject(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueInternal(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.Deserialize(JsonReader reader, Type objectType, Boolean checkAdditionalContent)\r\n   at Newtonsoft.Json.JsonSerializer.DeserializeInternal(JsonReader reader, Type objectType)\r\n   at Newtonsoft.Json.JsonSerializer.Deserialize(JsonReader reader, Type objectType)\r\n   at Newtonsoft.Json.JsonSerializer.Deserialize(TextReader reader, Type objectType)\r\n   at Linedata.Foundation.Messaging.Serialization.Json.JsonNetSerializer.Deserialize(Type type, Stream stream)","Properties":{"type":"CreateAccount","SourceContext":"Linedata.Foundation.Messaging.Serialization.Json.JsonNetSerializer"}}
{"Timestamp":"2021-03-24T15:52:34.8004902+01:00","Level":"Warning","MessageTemplate":"Error processing inbound message","Exception":"Linedata.Foundation.Messaging.SerializationException: Error deserializing message type CreateAccount\r\n ---> Newtonsoft.Json.JsonSerializationException: Unable to find a constructor to use for type Accounts.Domain.Commands.Public.CreateAccount. A class should either have a default constructor, one constructor with arguments or a constructor marked with the JsonConstructor attribute. Path 'CommandId', line 1, position 13.\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateNewObject(JsonReader reader, JsonObjectContract objectContract, JsonProperty containerMember, JsonProperty containerProperty, String id, Boolean& createdFromNonDefaultCreator)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObject(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueInternal(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.Deserialize(JsonReader reader, Type objectType, Boolean checkAdditionalContent)\r\n   at Newtonsoft.Json.JsonSerializer.DeserializeInternal(JsonReader reader, Type objectType)\r\n   at Newtonsoft.Json.JsonSerializer.Deserialize(JsonReader reader, Type objectType)\r\n   at Newtonsoft.Json.JsonSerializer.Deserialize(TextReader reader, Type objectType)\r\n   at Linedata.Foundation.Messaging.Serialization.Json.JsonNetSerializer.Deserialize(Type type, Stream stream)\r\n   --- End of inner exception stack trace ---\r\n   at Linedata.Foundation.Messaging.Serialization.Json.JsonNetSerializer.Deserialize(Type type, Stream stream)\r\n   at Linedata.Foundation.Messaging.Serialization.MessageSerializerExtensions.Deserialize(IMessageSerializer serializer, Type type, Byte[] data)\r\n   at Linedata.Foundation.Messaging.Channels.DuplexChannel.ConvertMessage(Envelope envelope)\r\n   at Linedata.Foundation.Messaging.Channels.DuplexChannel.OnReceiveAsync(IDuplexSocket socket, Envelope envelope)\r\n   at Linedata.Foundation.Messaging.Dispatchers.Queued.QueuedDuplexChannelDispatcher.ProcessInboundAsync(CancellationToken cancellationToken)","Properties":{"SourceContext":"Linedata.Foundation.Messaging.Dispatchers.Queued.QueuedDuplexChannelDispatcher"}}
