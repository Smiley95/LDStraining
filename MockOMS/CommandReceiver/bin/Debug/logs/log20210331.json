{"Timestamp":"2021-03-31T14:57:11.7378618+01:00","Level":"Warning","MessageTemplate":"No token validator was configured; incoming message access tokens will not be validated","Properties":{"SourceContext":"Linedata.Foundation.Messaging.IdentityModel.TokenValidatorPipeline"}}
{"Timestamp":"2021-03-31T14:57:11.7461437+01:00","Level":"Warning","MessageTemplate":"No identity context accessor was configured; no identity context will be set","Properties":{"SourceContext":"Linedata.Foundation.Messaging.IdentityModel.TokenValidatorPipeline"}}
{"Timestamp":"2021-03-31T14:57:11.7464251+01:00","Level":"Warning","MessageTemplate":"No service credentials provider was configured; outgoing messages will not contain access tokens","Properties":{"SourceContext":"Linedata.Foundation.Messaging.IdentityModel.TokenProviderPipeline"}}
{"Timestamp":"2021-03-31T14:57:11.8331910+01:00","Level":"Information","MessageTemplate":"Starting service {name}...","Properties":{"name":"Command Receiver","SourceContext":"Linedata.Foundation.ServiceHosting.Microservice"}}
{"Timestamp":"2021-03-31T14:57:11.8395272+01:00","Level":"Information","MessageTemplate":"Opening command receiver server endpoint at {address}","Properties":{"address":"tcp://localhost:12333","SourceContext":"Linedata.Foundation.CommandReceiver.CommandReceiverService"}}
{"Timestamp":"2021-03-31T14:57:11.9594574+01:00","Level":"Information","MessageTemplate":"Command Receiver is listening at {address}","Properties":{"address":"tcp://localhost:12333","SourceContext":"Linedata.Foundation.CommandReceiver.CommandReceiverService"}}
{"Timestamp":"2021-03-31T14:57:11.9729270+01:00","Level":"Information","MessageTemplate":"Application started. Press Ctrl+C to shut down.","Properties":{"SourceContext":"Microsoft.Hosting.Lifetime"}}
{"Timestamp":"2021-03-31T14:57:11.9766911+01:00","Level":"Information","MessageTemplate":"Hosting environment: {envName}","Properties":{"envName":"Production","SourceContext":"Microsoft.Hosting.Lifetime"}}
{"Timestamp":"2021-03-31T14:57:11.9769295+01:00","Level":"Information","MessageTemplate":"Content root path: {contentRoot}","Properties":{"contentRoot":"C:\\Users\\Etaieb\\Desktop\\Training\\MockOMS\\CommandReceiver\\bin\\Debug\\netcoreapp3.1","SourceContext":"Microsoft.Hosting.Lifetime"}}
{"Timestamp":"2021-03-31T14:57:11.9813996+01:00","Level":"Information","MessageTemplate":"Application is shutting down...","Properties":{"SourceContext":"Microsoft.Hosting.Lifetime"}}
{"Timestamp":"2021-03-31T14:57:12.6969965+01:00","Level":"Information","MessageTemplate":"Received connection from {address}","Properties":{"address":"a5c0811ad12f4d318c312535a998078c","SourceContext":"Linedata.Foundation.CommandReceiver.CommandReceiverService"}}
{"Timestamp":"2021-03-31T14:57:12.8048673+01:00","Level":"Warning","MessageTemplate":"Error deserializing message type {type}","Exception":"Newtonsoft.Json.JsonSerializationException: Unable to find a constructor to use for type Accounts.Domain.Commands.Public.CreateAccount. A class should either have a default constructor, one constructor with arguments or a constructor marked with the JsonConstructor attribute. Path 'Amount', line 1, position 10.\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateNewObject(JsonReader reader, JsonObjectContract objectContract, JsonProperty containerMember, JsonProperty containerProperty, String id, Boolean& createdFromNonDefaultCreator)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObject(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueInternal(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.Deserialize(JsonReader reader, Type objectType, Boolean checkAdditionalContent)\r\n   at Newtonsoft.Json.JsonSerializer.DeserializeInternal(JsonReader reader, Type objectType)\r\n   at Newtonsoft.Json.JsonSerializer.Deserialize(JsonReader reader, Type objectType)\r\n   at Newtonsoft.Json.JsonSerializer.Deserialize(TextReader reader, Type objectType)\r\n   at Linedata.Foundation.Messaging.Serialization.Json.JsonNetSerializer.Deserialize(Type type, Stream stream)","Properties":{"type":"CreateAccount","SourceContext":"Linedata.Foundation.Messaging.Serialization.Json.JsonNetSerializer"}}
{"Timestamp":"2021-03-31T14:57:12.8124545+01:00","Level":"Warning","MessageTemplate":"Error processing inbound message","Exception":"Linedata.Foundation.Messaging.SerializationException: Error deserializing message type CreateAccount\r\n ---> Newtonsoft.Json.JsonSerializationException: Unable to find a constructor to use for type Accounts.Domain.Commands.Public.CreateAccount. A class should either have a default constructor, one constructor with arguments or a constructor marked with the JsonConstructor attribute. Path 'Amount', line 1, position 10.\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateNewObject(JsonReader reader, JsonObjectContract objectContract, JsonProperty containerMember, JsonProperty containerProperty, String id, Boolean& createdFromNonDefaultCreator)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObject(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueInternal(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.Deserialize(JsonReader reader, Type objectType, Boolean checkAdditionalContent)\r\n   at Newtonsoft.Json.JsonSerializer.DeserializeInternal(JsonReader reader, Type objectType)\r\n   at Newtonsoft.Json.JsonSerializer.Deserialize(JsonReader reader, Type objectType)\r\n   at Newtonsoft.Json.JsonSerializer.Deserialize(TextReader reader, Type objectType)\r\n   at Linedata.Foundation.Messaging.Serialization.Json.JsonNetSerializer.Deserialize(Type type, Stream stream)\r\n   --- End of inner exception stack trace ---\r\n   at Linedata.Foundation.Messaging.Serialization.Json.JsonNetSerializer.Deserialize(Type type, Stream stream)\r\n   at Linedata.Foundation.Messaging.Serialization.MessageSerializerExtensions.Deserialize(IMessageSerializer serializer, Type type, Byte[] data)\r\n   at Linedata.Foundation.Messaging.Channels.DuplexChannel.ConvertMessage(Envelope envelope)\r\n   at Linedata.Foundation.Messaging.Channels.DuplexChannel.OnReceiveAsync(IDuplexSocket socket, Envelope envelope)\r\n   at Linedata.Foundation.Messaging.Dispatchers.Queued.QueuedDuplexChannelDispatcher.ProcessInboundAsync(CancellationToken cancellationToken)","Properties":{"SourceContext":"Linedata.Foundation.Messaging.Dispatchers.Queued.QueuedDuplexChannelDispatcher"}}
{"Timestamp":"2021-03-31T14:57:16.9888452+01:00","Level":"Information","MessageTemplate":"Waiting for the host to be disposed. Ensure all 'IHost' instances are wrapped in 'using' blocks.","Properties":{"SourceContext":"Microsoft.Hosting.Lifetime"}}
{"Timestamp":"2021-03-31T15:04:28.7859484+01:00","Level":"Warning","MessageTemplate":"No token validator was configured; incoming message access tokens will not be validated","Properties":{"SourceContext":"Linedata.Foundation.Messaging.IdentityModel.TokenValidatorPipeline"}}
{"Timestamp":"2021-03-31T15:04:28.7927408+01:00","Level":"Warning","MessageTemplate":"No identity context accessor was configured; no identity context will be set","Properties":{"SourceContext":"Linedata.Foundation.Messaging.IdentityModel.TokenValidatorPipeline"}}
{"Timestamp":"2021-03-31T15:04:28.7930031+01:00","Level":"Warning","MessageTemplate":"No service credentials provider was configured; outgoing messages will not contain access tokens","Properties":{"SourceContext":"Linedata.Foundation.Messaging.IdentityModel.TokenProviderPipeline"}}
{"Timestamp":"2021-03-31T15:04:28.8811174+01:00","Level":"Information","MessageTemplate":"Starting service {name}...","Properties":{"name":"Command Receiver","SourceContext":"Linedata.Foundation.ServiceHosting.Microservice"}}
{"Timestamp":"2021-03-31T15:04:28.8878635+01:00","Level":"Information","MessageTemplate":"Opening command receiver server endpoint at {address}","Properties":{"address":"tcp://localhost:12333","SourceContext":"Linedata.Foundation.CommandReceiver.CommandReceiverService"}}
{"Timestamp":"2021-03-31T15:04:29.0229373+01:00","Level":"Information","MessageTemplate":"Command Receiver is listening at {address}","Properties":{"address":"tcp://localhost:12333","SourceContext":"Linedata.Foundation.CommandReceiver.CommandReceiverService"}}
{"Timestamp":"2021-03-31T15:04:29.0419374+01:00","Level":"Information","MessageTemplate":"Application started. Press Ctrl+C to shut down.","Properties":{"SourceContext":"Microsoft.Hosting.Lifetime"}}
{"Timestamp":"2021-03-31T15:04:29.0456855+01:00","Level":"Information","MessageTemplate":"Hosting environment: {envName}","Properties":{"envName":"Production","SourceContext":"Microsoft.Hosting.Lifetime"}}
{"Timestamp":"2021-03-31T15:04:29.0459137+01:00","Level":"Information","MessageTemplate":"Content root path: {contentRoot}","Properties":{"contentRoot":"C:\\Users\\Etaieb\\Desktop\\Training\\MockOMS\\CommandReceiver\\bin\\Debug\\netcoreapp3.1","SourceContext":"Microsoft.Hosting.Lifetime"}}
{"Timestamp":"2021-03-31T15:04:29.0508218+01:00","Level":"Information","MessageTemplate":"Application is shutting down...","Properties":{"SourceContext":"Microsoft.Hosting.Lifetime"}}
{"Timestamp":"2021-03-31T15:04:34.0558690+01:00","Level":"Information","MessageTemplate":"Waiting for the host to be disposed. Ensure all 'IHost' instances are wrapped in 'using' blocks.","Properties":{"SourceContext":"Microsoft.Hosting.Lifetime"}}
{"Timestamp":"2021-03-31T15:04:34.0701567+01:00","Level":"Information","MessageTemplate":"Received connection from {address}","Properties":{"address":"b6b12fd61f224880a28e330f746193a0","SourceContext":"Linedata.Foundation.CommandReceiver.CommandReceiverService"}}
{"Timestamp":"2021-03-31T15:04:34.1774070+01:00","Level":"Warning","MessageTemplate":"Error deserializing message type {type}","Exception":"Newtonsoft.Json.JsonSerializationException: Unable to find a constructor to use for type Accounts.Domain.Commands.Public.CreateAccount. A class should either have a default constructor, one constructor with arguments or a constructor marked with the JsonConstructor attribute. Path 'Amount', line 1, position 10.\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateNewObject(JsonReader reader, JsonObjectContract objectContract, JsonProperty containerMember, JsonProperty containerProperty, String id, Boolean& createdFromNonDefaultCreator)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObject(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueInternal(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.Deserialize(JsonReader reader, Type objectType, Boolean checkAdditionalContent)\r\n   at Newtonsoft.Json.JsonSerializer.DeserializeInternal(JsonReader reader, Type objectType)\r\n   at Newtonsoft.Json.JsonSerializer.Deserialize(JsonReader reader, Type objectType)\r\n   at Newtonsoft.Json.JsonSerializer.Deserialize(TextReader reader, Type objectType)\r\n   at Linedata.Foundation.Messaging.Serialization.Json.JsonNetSerializer.Deserialize(Type type, Stream stream)","Properties":{"type":"CreateAccount","SourceContext":"Linedata.Foundation.Messaging.Serialization.Json.JsonNetSerializer"}}
{"Timestamp":"2021-03-31T15:04:34.1847217+01:00","Level":"Warning","MessageTemplate":"Error processing inbound message","Exception":"Linedata.Foundation.Messaging.SerializationException: Error deserializing message type CreateAccount\r\n ---> Newtonsoft.Json.JsonSerializationException: Unable to find a constructor to use for type Accounts.Domain.Commands.Public.CreateAccount. A class should either have a default constructor, one constructor with arguments or a constructor marked with the JsonConstructor attribute. Path 'Amount', line 1, position 10.\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateNewObject(JsonReader reader, JsonObjectContract objectContract, JsonProperty containerMember, JsonProperty containerProperty, String id, Boolean& createdFromNonDefaultCreator)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObject(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueInternal(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\r\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.Deserialize(JsonReader reader, Type objectType, Boolean checkAdditionalContent)\r\n   at Newtonsoft.Json.JsonSerializer.DeserializeInternal(JsonReader reader, Type objectType)\r\n   at Newtonsoft.Json.JsonSerializer.Deserialize(JsonReader reader, Type objectType)\r\n   at Newtonsoft.Json.JsonSerializer.Deserialize(TextReader reader, Type objectType)\r\n   at Linedata.Foundation.Messaging.Serialization.Json.JsonNetSerializer.Deserialize(Type type, Stream stream)\r\n   --- End of inner exception stack trace ---\r\n   at Linedata.Foundation.Messaging.Serialization.Json.JsonNetSerializer.Deserialize(Type type, Stream stream)\r\n   at Linedata.Foundation.Messaging.Serialization.MessageSerializerExtensions.Deserialize(IMessageSerializer serializer, Type type, Byte[] data)\r\n   at Linedata.Foundation.Messaging.Channels.DuplexChannel.ConvertMessage(Envelope envelope)\r\n   at Linedata.Foundation.Messaging.Channels.DuplexChannel.OnReceiveAsync(IDuplexSocket socket, Envelope envelope)\r\n   at Linedata.Foundation.Messaging.Dispatchers.Queued.QueuedDuplexChannelDispatcher.ProcessInboundAsync(CancellationToken cancellationToken)","Properties":{"SourceContext":"Linedata.Foundation.Messaging.Dispatchers.Queued.QueuedDuplexChannelDispatcher"}}
